Bootstrap: library
From: ubuntu:20.04
Stage: build

%setup
mkdir -p ${SINGULARITY_ROOTFS}/opt
cd ${SINGULARITY_ROOTFS}/opt
git clone https://github.com/delta9000/websockify.git
cd websockify
git checkout port_file_feature
cd ${SINGULARITY_ROOTFS}/opt
wget https://github.com/novnc/noVNC/archive/refs/tags/v1.2.0.tar.gz
tar xvf v1.2.0.tar.gz

%files
    services.conf
    supervisor.conf
    xfcestart.sh
    Xvncstart.sh
    session-manager-export.desktop

%environment
    export LC_ALL=C

%post
    export DEBIAN_FRONTEND=noninteractive
    export TZ=America/New_York
    echo deb http://us.archive.ubuntu.com/ubuntu focal universe >> /etc/apt/sources.list
    #base
    apt-get update && apt-get install --no-install-recommends -y ca-certificates python3 python3-setuptools tigervnc-standalone-server supervisor openssh-client xauth tigervnc-common wget uuid-runtime vim tzdata firefox
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    dpkg-reconfigure --frontend noninteractive tzdata
    apt-get install -y --no-install-recommends \
      dbus-x11 \
      psmisc \
      xdg-utils \
      x11-xserver-utils \
      x11-utils \
      xfce4 \
      libgtk-3-bin \
      mousepad \
      xfce4-notifyd \
      xfce4-taskmanager \
      xfce4-terminal \
      xfce4-clipman-plugin \
      xfce4-datetime-plugin \
      xfce4-indicator-plugin \
      xfce4-timer-plugin \
      xfce4-whiskermenu-plugin \
      xubuntu-artwork \
      xubuntu-icon-theme \
      libxv1 \
      libqt5gui5 \
      qpdfview
    cd /opt/websockify
    python3 setup.py install
    echo "export BUILD_DATE=\"$(date -R)\"" >> $SINGULARITY_ENVIRONMENT
    mv /services.conf /etc/supervisor/conf.d/services.conf
    mv /supervisor.conf /etc/supervisor/supervisord.conf
    mv /xfcestart.sh /usr/local/bin/
    chmod +x /usr/local/bin/xfcestart.sh
    mv /Xvncstart.sh /usr/local/bin/
    chmod +x /usr/local/bin/xfcestart.sh
    chmod +x /usr/local/bin/Xvncstart.sh
    mkdir /cwd
    mv /session-manager-export.desktop /etc/xdg/autostart/
    mkdir /TMPDIR

%runscript
#!/bin/bash

    function usage(){
      echo "usage: singularity run --bind `pwd`:/cwd --bind $TMPDIR:/TMPDIR /path/to/sif/file.sif [-d \"displayname\"]"
      exit
    }

    while getopts "d:h" option; do
      case ${option} in
      d )
      export DISPLAYNAME="${$OPTARG}"
      ;;
      \? )
      usage
      ;;
      h )
      usage
      ;;
      esac
    done

    export PASSWORD=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w8 | head -n 1)
    export SUPERVISORD_PASSWORD=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w12 | head -n 1)
    export PYTHONPATH=/usr/local/lib/python3.8/dist-packages/websockify-0.9.0-py3.8.egg
    export DISPLAYNAME=${DISPLAYNAME:-$(hostname)}

    function cleanup() {
      sleep 1
      printf '\nCleaning up...\n'
      if [ -f "/TMPDIR/supervisord.pid" ]; then
        echo  "Killing supervisord..."
        kill -s SIGTERM $(cat "/TMPDIR/supervisord.pid")
      fi
      if [ ! -z "${DISPLAY_NUM}" ] && [ -e /tmp/.X11-unix/X$DISPLAY_NUM ]; then
        echo  "Removing X socket..."
        rm -f "/tmp/.X11-unix/X$DISPLAY_NUM"
      fi
      if [ ! -z "${SESSION_MANAGER}" ]; then
        export ICESOCKET="$(python3 -c $'import re,os,sys\nm=re.search(r"(?<!\@)\/tmp\/.ICE-unix\/\d*", os.getenv("SESSION_MANAGER"))\nif m is not None:\n\tprint(m.group(0))\n\tsys.exit(0)\nelse:\n\tsys.exit(1)')"
        if [ ! -z "${ICESOCKET}" ] && [ -e "$ICESOCKET" ]; then
          echo  "Removing ICE socket...$ICESOCKET"
          rm -f "$ICESOCKET"
        fi
      fi
      echo 'Done'
      exit
    }

    trap cleanup INT

    mkdir -p /TMPDIR/runtime
    chmod 700 /TMPDIR/runtime

    export XDG_CONFIG_HOME="/TMPDIR"
    export XDG_CACHE_HOME="/TMPDIR"
    export XDG_RUNTIME_DIR="/TMPDIR/runtime"
    export XDG_DATA_HOME="/TMPDIR"

    touch /TMPDIR/.Xauthority
    export XAUTHORITY=/TMPDIR/.Xauthority
    export ICEAUTHORITY=/TMPDIR/.ICEauthority
    echo $$ > /TMPDIR/runscript.pid
    bash -c 'printf "%s\n%s\n\n" $PASSWORD $PASSWORD | vncpasswd /TMPDIR/.vncpasswd'  &> /dev/null ||
    if [ $? -ne 0 ]; then
      echo "Error setting password, must be at least 6 characters"
      exit 1
    fi

    supervisord -n &> /dev/null &

    for i in {1..20}
      do
      if [ -e /TMPDIR/supervisor.sock ]; then
        break
      else
        sleep 1
        continue
      fi
    echo "Timeout waiting for supervisord to start"
    cleanup
    done

    supervisorctl start Xvnc

    for i in {1..20}
      do
      if [ -f /TMPDIR/.Xdisplaynum ] &&  [ -e /TMPDIR/.vncsocket ]; then
        sleep 2
        export DISPLAY_NUM=$(cat /TMPDIR/.Xdisplaynum | tr -d '\n')
        xauth add :$DISPLAY_NUM . $(xxd -l 16 -p /dev/urandom)
        break
      else
        sleep 1
        continue
      fi
    echo "Timeout waiting for Xvnc to start"
    cleanup
    done

    supervisorctl start websockify

    for i in {1..20}
      do
      if [ -f /TMPDIR/.novncport ]; then
        export NOVNC_PORT=$(cat /TMPDIR/.novncport)
        break
      else
        sleep 1
        continue
      fi
    echo "Timeout waiting for websockify to start"
    cleanup
    done

    supervisorctl start xfce

    for i in {1..20}
      do
      if [ -d /TMPDIR/xfce4 ] && [ -f /TMPDIR/session.rc ]; then
        source /TMPDIR/session.rc
        break
      else
        sleep 1
        continue
      fi
    echo "Timeout waiting for Xvnc to start"
    cleanup
    done

    export CONNECTION_STRING="https://ood.arc.vt.edu/rnode/$(hostname)/$NOVNC_PORT/vnc.html?autoconnect=true&port=$NOVNC_PORT&host=ood.arc.vt.edu/rnode/$(hostname)/$NOVNC_PORT&password=$PASSWORD"
    printf "X server listening on :%s\n" $DISPLAY_NUM
    printf "XAUTHORITY=%s ICEAUTHORITY=%s SESSION_MANAGER=%s DISPLAY=:%s\n\n" $XAUTHORITY $ICEAUTHORITY $SESSION_MANAGER $DISPLAY_NUM
    printf "Logs and sockets stored in %s\n" '/$TMPDIR/'
    printf "Connect to %s\n\n" $CONNECTION_STRING

    if [ -w "/cwd" ]; then
      printf "export NOVNC_PORT=\"%s\"\n" $NOVNC_PORT > /cwd/connection.rc
      printf "export CONNECTION_STRING=\"%s\"\n" $CONNECTION_STRING >> /cwd/connection.rc
      printf "export DISPLAY=\":%s\"\n" $DISPLAY_NUM >> /cwd/connection.rc
      printf "export XAUTHORITY=\"%s\"\n" '$TMPDIR/.Xauthority' >> /cwd/connection.rc
      printf "export ICEAUTHORITY=\"%s\"\n" '$TMPDIR/.ICEauthority' >> /cwd/connection.rc
      printf "export SESSION_MANAGER=\"%s\"\n" $SESSION_MANAGER >> /cwd/connection.rc
      printf "export password=\"%s\"\n" $PASSWORD >> /cwd/connection.rc
      printf "export hostname=\"%s\"\n" $(hostname) >> /cwd/connection.rc
      printf "export port=\"%s\"\n" $NOVNC_PORT >> /cwd/connection.rc
      echo "Wrote connection.rc to the /cwd bind mount"
    else
      echo "Add bind mount to /cwd from a writable directory to export connection.rc with bash sourceable details about this container, ex. 'singularity run --cleanenv --env PYTHONPATH=/usr/local/lib/python3.8/dist-packages/websockify-0.9.0-py3.8.egg --bind \`pwd\`:/cwd ubuntu-xfce.sif'";
    fi

    printf "Waiting for supervisord to exit \n\nTo manually stop either:\n - Run 'kill -s SIGINT %s'\n - Log out of the windowmanager in the novnc session \n - Press CTRL+C in this terminal\n" $(cat /TMPDIR/supervisord.pid)

    wait $(cat /TMPDIR/supervisord.pid)
    cleanup

%test
    grep -q NAME=\"Ubuntu\" /etc/os-release
    if [ $? -eq 0 ]; then
        echo "Container base is Ubuntu as expected."
    else
        echo "Container base is not Ubuntu."
    fi

%labels
    Author bsandbro@vt.edu
    Version v0.0.1

%help
    This container wraps an Xvnc server with an xfce window manager and exposes
    a noVNC server on a random ephemeral port, connection details are printed to the terminal
    or exported to connection.rc when a writable directory is bind mounted to /cwd in the container.
    Source connection.rc and the terminal default DISPLAY will be set to the container XVNC instance
